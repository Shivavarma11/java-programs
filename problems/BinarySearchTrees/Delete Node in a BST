class Solution {
    public TreeNode helper(TreeNode root)
    {   
        if(root == null) return null;
        if(root.left==null)
        {
            return root.right;
        }
        else if(root.right==null)
        {
            return root.left;
        }
        else
        {
            TreeNode rightNode=root.right;
            TreeNode rightMost=getRightMost(root.left);
            rightMost.right=rightNode;
            return root.left;
        }

        
    }
    public TreeNode getRightMost(TreeNode root)
    {
        while(root.right!=null)
        {
            root=root.right;
        }
        return root;
    }
    public TreeNode deleteNode(TreeNode root, int key) {
        if(root==null)
        {
            return null;
        }
        if(root.val==key)
        {
            return helper(root);
        }
        TreeNode dummy=root;
        while(root!=null)
        {
            if(key<root.val)
            {
                if(root.left!=null && root.left.val!=key)
                {
                    root=root.left;
                }
                else
                {
                    root.left=helper(root.left);
                    break;
                }
            }
            else
            {
                if(root.right!=null && root.right.val!=key)
                {
                    root=root.right;
                }
                else
                {
                    root.right=helper(root.right);
                    break;
                }
            }
        }
        return dummy;
    }
}
