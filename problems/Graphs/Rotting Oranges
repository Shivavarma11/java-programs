class Pair
{
    int row;
    int col;
    int time;
    Pair(int row,int col,int time)
    {
        this.row=row;
        this.col=col;
        this.time=time;
    }
} 
class Solution {
    public int orangesRotting(int[][] grid) {
        int m=grid.length;
        int n=grid[0].length;
        int[][] vis=new int[m][n];
        Queue<Pair> que=new LinkedList<>();
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]==2)
                {
                    que.offer(new Pair(i,j,0));
                    vis[i][j]=2;
                }
            }
        }
        int time=0;
        int[] drow={-1,0,1,0};
        int[] dcol={0,1,0,-1};
        while(!que.isEmpty())
        {
            Pair top=que.poll();
            int r=top.row;
            int c=top.col;
            int t=top.time;
            time=Math.max(time,t);
            for(int i=0;i<4;i++)
            {
                int nrow=r+drow[i];
                int ncol=c+dcol[i];
                if(nrow>=0 && nrow<m && ncol>=0 && ncol<n && vis[nrow][ncol]==0 && grid[nrow][ncol]==1)
                {
                    que.offer(new Pair(nrow,ncol,t+1));
                    vis[nrow][ncol]=2;
                }
            }
        }
        for(int i=0;i<m;i++)
        {
           for(int j=0;j<n;j++)
           {
                if(grid[i][j]==1 && vis[i][j]!=2)
                {
                    return -1;
                }
            }
         }
        return time;
        
    }
}
