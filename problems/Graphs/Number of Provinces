class Solution {
    static void DFS(int node,ArrayList<ArrayList<Integer>> list,boolean[] vis)
    {
        vis[node]=true;
        for(int n:list.get(node))
        {
            if(!vis[n])
            {
                DFS(n,list,vis);
            }
        }
    }
    static int numProvinces(ArrayList<ArrayList<Integer>> adj, int V) {
        // code here
        ArrayList<ArrayList<Integer>> list=new ArrayList<>();
        for(int i=0;i<V;i++)
        {
            list.add(new ArrayList<>());
        }
        for(int i=0;i<V;i++)
        {
            for(int j=0;j<V;j++)
            {
                if(i!=j && adj.get(i).get(j)==1)
                {
                    list.get(i).add(j);
                    list.get(j).add(i);
                }
            }
        }
        //System.out.println(list);
        boolean[] vis=new boolean[V];
        int cnt=0;
        for(int i=0;i<V;i++)
        {
            if(!vis[i])
            {
                cnt++;
                DFS(i,list,vis);
            }
        }
        return cnt;
        
    }
}
