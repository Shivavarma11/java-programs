class Solution {
    // Function to return list containing vertices in Topological order.
    static void dfs(int node,ArrayList<ArrayList<Integer>> adj,int[] vis,Stack<Integer> st)
    {
        vis[node]=1;
        for(int n:adj.get(node))
        {
            if(vis[n]==0)
            {
                dfs(n,adj,vis,st);
            }

        }
         
        st.push(node);
    }
    static ArrayList<Integer> topologicalSort(ArrayList<ArrayList<Integer>> adj) {
        // Your code here
        Stack<Integer> st=new Stack<>();
        int n=adj.size();
        int[] vis=new int[n];
        for(int i=0;i<n;i++)
        {
            if(vis[i]==0)
            {
                dfs(i,adj,vis,st);
            }
        }
        ArrayList<Integer> list=new ArrayList<>();
        while(!st.isEmpty())
        {
            list.add(st.pop());
        }
        
        return list;
    }
}
