class Pair
{
    int n;
    int dis;
    public Pair(int n,int dis)
    {
        this.n=n;
        this.dis=dis;
    }
}
class Solution {
    public void BFS(int src,List<List<Integer>> adj,int[] dis,int infi)
    {
        Queue<Pair> que=new LinkedList<>();
        que.offer(new Pair(src,0));
        while(!que.isEmpty())
        {
            Pair top=que.poll();
            int node=top.n;
            int d=top.dis;
            if(d<dis[node])
            {
                dis[node]=d;
            }
            for(int n:adj.get(node))
            {
                if(dis[n]==infi)
                {
                    que.offer(new Pair(n,d+1));
                }
                
            }
        }
    }
    public int[] shortestPath(int[][] edges,int n,int m ,int src) {
        // Code here
        List<List<Integer>> adj=new ArrayList<>();
        for(int i=0;i<n;i++)
        {
            adj.add(new ArrayList<>());
        }
        for(int i=0;i<m;i++)
        {
                adj.get(edges[i][0]).add(edges[i][1]);
                adj.get(edges[i][1]).add(edges[i][0]);
        }
        int infi=Integer.MAX_VALUE;
        int[] dis=new int[n];
        Arrays.fill(dis,infi);
        //dis[src]=0;
        BFS(src,adj,dis,infi);
        for(int i=0;i<n;i++)
        {
            if(dis[i]==infi)
            {
                dis[i]=-1;
            }
        }
        return dis;
    }
}
