class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        List<ArrayList<Integer>> adj=new ArrayList<>();
        int n=prerequisites.length;
        for(int i=0;i<numCourses;i++)
        {
            adj.add(new ArrayList<>());
        }
        for(int i=0;i<n;i++)
        {
            adj.get(prerequisites[i][0]).add(prerequisites[i][1]);
        }
        int[] indegree=new int[numCourses];
        for(int i=0;i<numCourses;i++)
        {
            for(int e:adj.get(i))
            {
                indegree[e]++;
            }
        }
        Queue<Integer> que=new LinkedList<>();
        for(int i=0;i<numCourses;i++)
        {
            if(indegree[i]==0)
            {
                que.offer(i);
            }
        }
        int cnt=0;
        while(!que.isEmpty())
        {
            int node=que.poll();
            cnt++;
            for(int nod:adj.get(node))
            {
                indegree[nod]--;
                if(indegree[nod]==0)
                {
                    que.offer(nod);
                }
            }
        }
        if(cnt==numCourses)
        {
            return true;
        }
        return false;
    }
}
