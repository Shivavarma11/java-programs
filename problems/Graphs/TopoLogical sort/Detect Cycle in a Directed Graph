class Solution {
    // Function to detect cycle in a directed graph.
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        // code here
        Queue<Integer> que=new LinkedList<>();
        int v=adj.size();
        int[] indegree=new int[v];
        for(int i=0;i<v;i++)
        {
            for(int n:adj.get(i))
            {
                indegree[n]++;
            }
        }
        for(int i=0;i<v;i++)
        {
            if(indegree[i]==0)
            {
                que.offer(i);
            }
        }
        ArrayList<Integer> list=new ArrayList<>();
        while(!que.isEmpty())
        {
            int node=que.poll();
            list.add(node);
            for(int n:adj.get(node))
            {
                indegree[n]--;
                if(indegree[n]==0)
                {
                    que.offer(n);
                }
            }
        }
        if(list.size()==v)
        {
            return false;
        }
        return true;
    }
}
