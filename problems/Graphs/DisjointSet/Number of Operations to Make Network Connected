class DisjointSet
{
    List<Integer> rank=new ArrayList<>();
    List<Integer> parent=new ArrayList<>();
    public DisjointSet(int n)
    {
        for(int i=0;i<n;i++)
        {
            rank.add(0);
            parent.add(i);
        }
    }
    public int findP(int n)
    {
        if(n==parent.get(n))
        {
            return n;
        }
        int p=findP(parent.get(n));
        parent.set(n,p);
        return p;
    }
    public void unionByrank(int u,int v)
    {
        int ultp_u=findP(u);
        int ultp_v=findP(v);
        if(ultp_u==ultp_v)
        {
            return;
        }
        if(rank.get(ultp_u)<rank.get(ultp_v))
        {
            parent.set(ultp_u,ultp_v);
        }
        else if(rank.get(ultp_v)<rank.get(ultp_u))
        {
            parent.set(ultp_v,ultp_u);
        }
        else
        {
            parent.set(ultp_v,ultp_u);
            int ranku=rank.get(ultp_u);
            rank.set(ultp_u,ranku+1);
        }
    }
}
class Solution {
    public int makeConnected(int n, int[][] connections) {
        DisjointSet ds=new DisjointSet(n);
        int extra=0;
        for(int[] arr:connections)
        {
            int u=arr[0];
            int v=arr[1];
            if(ds.findP(u)==ds.findP(v))
            {
                extra++;
            }
            else
            {
                ds.unionByrank(u,v);
            }
        }
        int compo=0;
        for(int i=0;i<n;i++)
        {
            if(ds.parent.get(i)==i)
            {
                compo++;
            }
        }
        int ans=compo-1;
        if(extra>=ans)
        {
            return ans;
        }
        else 
        {
            return -1;
        }
    }
}
