class DisjointSet
{
    List<Integer> rank=new ArrayList<>();
    List<Integer> parent=new ArrayList<>();
    public DisjointSet(int n)
    {
        for(int i=0;i<=n;i++)
        {
            rank.add(0);
            parent.add(i);
        }
    }
    public int findParent(int n)
    {
        if(n==parent.get(n))
        {
            return n;
        }
        int p=findParent(parent.get(n));
        parent.set(n,p);
        return parent.get(n);
    }
    public void  unionByRank(int u,int v)
    {
        int ultp_u=findParent(u);
        int ultp_v=findParent(v);
        if(ultp_u==ultp_v)
        {
            return ;
        }
        if(rank.get(ultp_u)<rank.get(ultp_v))
        {
            parent.set(ultp_u,ultp_v);
        }
        else if(rank.get(ultp_v)<rank.get(ultp_u))
        {
            parent.set(ultp_v,ultp_u);
        }
        else
        {
            parent.set(ultp_v,ultp_u);
            int ranku=rank.get(ultp_u);
            rank.set(ultp_u,ranku+1);
        }
    }
}
class Solution {
    public List<List<String>> accountsMerge(List<List<String>> accounts) {
        int n=accounts.size();
        DisjointSet ds=new DisjointSet(n);
        HashMap<String,Integer> map=new HashMap<>();
        for(int i=0;i<n;i++)
        {
            for(int j=1;j<accounts.get(i).size();j++)
            {
                String mail=accounts.get(i).get(j);
                if(map.containsKey(mail))
                {
                    int node=map.get(mail);
                    ds.unionByRank(i,node);
                }
                else
                {
                    map.put(mail,i);
                }
            }
        }
        List<List<String>> mergedMail=new ArrayList<>();
        for(int i=0;i<n;i++)
        {
            mergedMail.add(new ArrayList<>());
        }
        // for(String key:map.keySet())
        // {
        //     int node=ds.findParent(map.get(key));
        //     merrgedmMail.get(node).add(key);
        // }
        for(Map.Entry<String,Integer> it:map.entrySet())
        {
            String mail=it.getKey();
            int node=ds.findParent(it.getValue());
            mergedMail.get(node).add(mail);
        }
        List<List<String>> res=new ArrayList<>();
        for(int i=0;i<n;i++)
        {
            String name=accounts.get(i).get(0);
            if(mergedMail.get(i).size()==0) continue;
            List<String> temp=new ArrayList<>();
            temp.add(name);
            Collections.sort(mergedMail.get(i));
            for(String it:mergedMail.get(i))
            {
                temp.add(it);
            }
            res.add(temp);
        }
        return res;
    }
}
