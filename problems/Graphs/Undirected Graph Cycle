class Pair
{
    int node;
    int parent;
    Pair(int node,int parent)
    {
        this.node=node;
        this.parent=parent;
    }
}
class Solution {
    // Function to detect cycle in an undirected graph.
    public boolean BFS(int src,int[] vis,ArrayList<ArrayList<Integer>> adj)
    {
        Queue<Pair> que=new LinkedList<>();
        que.offer(new Pair(src,-1));
        vis[src]=1;
        while(!que.isEmpty())
        {
            Pair top=que.poll();
            int node=top.node;
            int par=top.parent;
            for(int e:adj.get(node))
            {
                if(vis[e]==0)
                {
                    que.offer(new Pair(e,node));
                    vis[e]=1;
                }
                else if(e!=par)
                {
                    return true;
                }
            }
        }
        
        return false;
    }
    public boolean isCycle(ArrayList<ArrayList<Integer>> adj) {
        // Code here
        int n=adj.size();
        int[] vis=new int[n];
        for(int i=0;i<n;i++)
        {
            if(vis[i]==0)
            {
                if(BFS(i,vis,adj)==true)
                {
                    return true;
                }
            }
        }
        return false;
        
    }
}
