class Tuple
{
    int r;
    int c;
    int eff;
    public Tuple(int r,int c,int eff)
    {
        this.r=r;
        this.c=c;
        this.eff=eff;
    }
}
class Solution {
    public int minimumEffortPath(int[][] heights) {
        int n=heights.length;
        int m=heights[0].length;
        int[][] dis=new int[n][m];
        int infi=Integer.MAX_VALUE;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                dis[i][j]=infi;
            }
        }
        dis[0][0]=0;
        int[] delrow={-1,0,+1,0};
        int[] delcol={0,+1,0,-1};
        Queue<Tuple> pq=new PriorityQueue<>((x,y)-> x.eff-y.eff);
        pq.offer(new Tuple(0,0,0));
        while(!pq.isEmpty())
        {
            Tuple top=pq.poll();
            int r=top.r;
            int c=top.c;
            int eff=top.eff;
            if(r==n-1 && c==m-1)
            {
                return eff;
            }
            for(int i=0;i<4;i++)
            {
                int nrow=r+delrow[i];
                int ncol=c+delcol[i];
                
                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m )
                {
                    int max=Math.max(eff,Math.abs(heights[r][c]-heights[nrow][ncol]));
                    if(max<dis[nrow][ncol])
                    {
                        dis[nrow][ncol]=max;
                        pq.offer(new Tuple(nrow,ncol,max));

                    }
                    
                }
            }
        }
        return 0;
    }
}
