class Pair
{
    int n;
    int d;
    public Pair(int n,int d)
    {
        this.n=n;
        this.d=d;
    }
}
class Solution {
    public int networkDelayTime(int[][] times, int n, int k) {
        List<List<Pair>> adj=new ArrayList<>();
        for(int i=0;i<=n;i++)
        {
            adj.add(new ArrayList<>());
        }
        for(int i=0;i<times.length;i++)
        {
            adj.get(times[i][0]).add(new Pair(times[i][1],times[i][2]));
        }
        int infi=(int)1e9;
        int[] dis=new int[n+1];
        Arrays.fill(dis,infi);
        dis[k]=0;
        Queue<Pair> que=new PriorityQueue<>((x,y)->x.d-y.d);
        que.offer(new Pair(k,0));
        while(!que.isEmpty())
        {
            Pair top=que.poll();
            int node=top.n;
            int d=top.d;
            for(Pair p:adj.get(node))
            {
                int adjn=p.n;
                int cost=p.d;
                if(cost+d<dis[adjn])
                {
                    dis[adjn]=cost+d;
                    que.offer(new Pair(adjn,cost+d));
                }
            }
        }
        int ans=Integer.MIN_VALUE;
        for(int i=1;i<=n;i++)
        {
            ans=Math.max(dis[i],ans);
            if(dis[i]==infi)
            {
                return -1;
            }
        }
        return ans;
    }
}
