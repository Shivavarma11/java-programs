class Solution {
    public int find(int[] coins,int amo,int n,int[][] dp)
    {
        if(n==0)
        {
            if(amo%coins[n]==0)
            {
                return amo/coins[n];
            }
            else 
            {
                return (int)(1e9);
            }
        }
        if(dp[n][amo]!=-1) return dp[n][amo];
        int take=Integer.MAX_VALUE;
        if(amo>=coins[n])
        {
            take=1+find(coins,amo-coins[n],n,dp);
        }
        int notTake=find(coins,amo,n-1,dp);
        return dp[n][amo]=Math.min(take,notTake);
    }
    public int coinChange(int[] coins, int amount) {
        int n=coins.length;
        int[][] dp=new int[n][amount+1];
        for(int[] arr:dp)
        {
            Arrays.fill(arr,-1);
        }
        int ans=find(coins,amount,n-1,dp);
        if(ans>=(int)1e9) return -1;
        return ans;
    }
}
