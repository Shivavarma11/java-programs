class Solution {
    public int find(int i,int j,String s,String t,int[][] dp)
    {
        if(i<0 || j<0) 
        {
            return 0;
        }
        if(dp[i][j]!=-1) return dp[i][j];
        if(s.charAt(i)==t.charAt(j))
        {
            return dp[i][j]=1+find(i-1,j-1,s,t,dp);
        }
        return dp[i][j]=Math.max(find(i-1,j,s,t,dp),find(i,j-1,s,t,dp));
    }
    public int minDistance(String word1, String word2) {
        int n=word1.length();
        int m=word2.length();
        //int[][] dp=new int[n+1][m+1];
        // for(int[] arr:dp)
        // {
        //     Arrays.fill(arr,-1);
        // }
        int[] prev=new int[m+1];
        int[] curr=new int[m+1];
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=m;j++)
            {
                if(word1.charAt(i-1)==word2.charAt(j-1))
                {
                    curr[j]=1+prev[j-1];
                }
                else
                {
                    curr[j]=Math.max(prev[j],curr[j-1]);
                }
            }
            prev=(int[])curr.clone();
        }
        int lcs=prev[m];
        int ans=n+m-2*lcs;
        return ans;
        
    }
}
