class Solution {
    public int find(int i,int buy,int cap,int n,int[] prices,int[][][] dp)
    {
        if(cap==0) return 0;
        if(i==n) return 0;
        if(dp[i][buy][cap]!=-1) return dp[i][buy][cap];
        int profit=0;
        if(buy==1)
        {
            profit=Math.max(-prices[i]+find(i+1,0,cap,n,prices,dp),0+find(i+1,1,cap,n,prices,dp));
        }
        else
        {
            profit=Math.max(prices[i]+find(i+1,1,cap-1,n,prices,dp),0+find(i+1,0,cap,n,prices,dp));
        }
        return dp[i][buy][cap]=profit;
    }
    public int maxProfit(int[] prices) {
        int n=prices.length;
        int[][][] dp=new int[n+1][2][3];
        // for(int[][] arr:dp)
        // {
        //     for(int[] ar:arr)
        //     {
        //         Arrays.fill(ar,-1);
        //     }
        // }
        // for(int i=0;i<=n;i++)
        // {
        //     for(int buy=0;buy<=1;buy++)
        //     {
        //         dp[i][buy][0]=0;
        //     }
        // }
        // for(int buy=0;buy<=1;buy++)
        // {
        //     for(int cap=0;cap<=2;cap++)
        //     {
        //         dp[n][buy][cap]=0;
        //     }
        // }
        for (int ind = n - 1; ind >= 0; ind--) {
            for (int buy = 0; buy <= 1; buy++) {
                for (int cap = 1; cap <= 2; cap++) {

                    if (buy == 1) { // We can buy the stock
                        dp[ind][buy][cap] = Math.max(0 + dp[ind + 1][1][cap],
                                -prices[ind] + dp[ind + 1][0][cap]);
                    }

                    if (buy == 0) { // We can sell the stock
                        dp[ind][buy][cap] = Math.max(0 + dp[ind + 1][0][cap],
                                prices[ind] + dp[ind + 1][1][cap - 1]);
                    }
                }
            }
        }

        return dp[0][1][2];
        
    }
}
