 class Solution {
    public static int LongestBitonicSequence(int n, int[] nums) {
        // code here
        int[] dp1=new int[n];
        int[] dp2=new int[n];
        dp1[0]=1;
        for(int i=1;i<n;i++)
        {
            dp1[i]=1;
            for(int j=0;j<i;j++)
            {
                if(nums[j]<nums[i] && dp1[i]<dp1[j]+1)
                {
                    dp1[i]=dp1[j]+1;
                }
            }
        }
        dp2[n-1]=1;
        for(int i=n-2;i>=0;i--)
        {
            dp2[i]=1;
            for(int j=n-1;j>i;j--)
            {
                if(nums[j]<nums[i] && dp2[i]<dp2[j]+1)
                {
                    dp2[i]=dp2[j]+1;
                }
            }
        }
        int ans=0;
        // int sum1=0;
        // int sum2=0;
        for(int i=0;i<n;i++)
        {
            // sum1+=dp1[i];
            // sum2+=dp2[i];
            if(dp1[i]>1 && dp2[i]>1)
            {
                ans=Math.max(ans,dp1[i]+dp2[i]-1);
            }
            
        }
        //if(sum1==n || sum2==n) return 0;
        return ans;
    }
}
