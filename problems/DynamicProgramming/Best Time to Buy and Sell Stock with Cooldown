class Solution {
    public int find(int i,int buy,int n,int[] prices,int[][] dp)
    {
        if(i>=n) return 0;
        if(dp[i][buy]!=-1) return dp[i][buy];
        if(buy==1)
        {
            return dp[i][buy]=Math.max(-prices[i]+find(i+1,0,n,prices,dp),0+find(i+1,1,n,prices,dp));
        }
        else
        {
            return dp[i][buy]=Math.max(prices[i]+find(i+2,1,n,prices,dp),0+find(i+1,0,n,prices,dp));
        }
    }
    public int maxProfit(int[] prices) {
        int n=prices.length;
        int[][] dp=new int[n+2][2];
        // for(int[] arr:dp)
        // {
        //     Arrays.fill(arr,-1);
        // }
        int[] curr=new int[2];
        int[] f1=new int[2];
        int[] f2=new int[2];
        for(int i=n-1;i>=0;i--)
        {
            curr[1]=Math.max(-prices[i]+f1[0],0+f1[1]);
 
            curr[0]=Math.max(prices[i]+f2[1],0+f1[0]); 
            f2=(int[])f1.clone();
            f1=(int[])curr.clone();
        }
        return  curr[1];
    }
}
