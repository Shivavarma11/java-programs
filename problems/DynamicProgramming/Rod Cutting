class Solution {
    // public int find(int ind,int len,int[] price,int[][] dp)
    // {
    //     if(ind==0)
    //     {
    //         return len*price[0];
    //     }
    //     if(dp[ind][len]!=-1) return dp[ind][len];
    //     int notTake=find(ind-1,len,price,dp);
    //     int take=Integer.MIN_VALUE;
    //     int rodlen=ind+1;
    //     if(len>=rodlen)
    //     {
    //         take=price[ind]+find(ind,len-rodlen,price,dp);
    //     }
    //     return dp[ind][len]=Math.max(take,notTake);
    // }
    
    public int cutRod(int[] price) {
        // code here
        int n=price.length;
        //int[][] dp=new int[n][n+1];
        // for(int[] arr:dp)
        // {
        //     Arrays.fill(arr,-1);
        // }
        int[] prev=new int[n+1];
        for(int len=0;len<=n;len++)
        {
            prev[len]=len*price[0];
        }
        for(int ind=1;ind<n;ind++)
        {
            int[] curr=new int[n+1];
            for(int len=0;len<=n;len++)
            {
                int notTake=prev[len];
                int take=Integer.MIN_VALUE;
                int rodlen=ind+1;
                if(len>=rodlen)
                {
                    take=price[ind]+curr[len-rodlen];
                }
                curr[len]=Math.max(take,notTake);
            }
            prev=curr;
        }
        return prev[n]; 
    }
}
