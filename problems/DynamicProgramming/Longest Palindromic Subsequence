class Solution {
    // public int find(int i,int j,String s,String t,int[][] dp)
    // {
    //     if(i<0 || j<0)
    //     {
    //         return 0;
    //     }
    //     if(dp[i][j]!=-1) return dp[i][j];
    //     if(s.charAt(i)==t.charAt(j))
    //     {
    //         return dp[i][j]=1+find(i-1,j-1,s,t,dp);
    //     }
    //     return dp[i][j]=Math.max(find(i-1,j,s,t,dp),find(i,j-1,s,t,dp));
    // }
    public int longestPalindromeSubseq(String s) {
        StringBuilder str=new StringBuilder();
        str.append(s);
        String t=str.reverse().toString();
        int n=s.length();
        //int[][] dp=new int[n+1][n+1];
        // for(int[] arr:dp)
        // {
        //     Arrays.fill(arr,-1);
        // }
        int[] prev=new int[n+1];
        
        for(int i=1;i<=n;i++)
        {
            int[] curr=new int[n+1];
            for(int j=1;j<=n;j++)
            {
                if(s.charAt(i-1)==t.charAt(j-1))
                {
                    curr[j]=1+prev[j-1];
                }
                else
                {
                    curr[j]=Math.max(prev[j],curr[j-1]);
                }
            }
            prev=curr;
        }
        return prev[n]; 
        
    }
}
