class Solution {
    // public int findLCS(int i,int j,String str1,String str2,int[][] dp)
    // {
    //     if(i<=0 || j<=0)
    //     {
    //         return 0;
    //     }
    //     if(dp[i][j]!=-1) return dp[i][j];
    //     if(str1.charAt(i-1)==str2.charAt(j-1))
    //     {
    //         return dp[i][j]=1+findLCS(i-1,j-1,str1,str2,dp);
    //     }
    //     return dp[i][j]=0+Math.max(findLCS(i-1,j,str1,str2,dp),findLCS(i,j-1,str1,str2,dp));
    // }
    public int longestCommonSubsequence(String text1, String text2) {
        int n=text1.length();
        int m=text2.length();
        //int[][] dp=new int[n+1][m+1];
        // for(int[] arr:dp)
        // {
        //     Arrays.fill(arr,-1);
        // }
        int[] prev=new int[m+1];
        int[] curr=new int[m+1];
        // for(int j=0;j<=m;j++) dp[0][j]=0;
        for(int j=0;j<=m;j++) prev[j]=0;
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=m;j++)
            {
                if(text1.charAt(i-1)==text2.charAt(j-1))
                {
                    curr[j]=1+ prev[j-1];
                }
                else
                {
                    curr[j]=Math.max(prev[j], curr[j-1]); 
                }
          
            }
            prev =(int[])(curr.clone());  
        }

        return prev[m]; 
        
    }
}
