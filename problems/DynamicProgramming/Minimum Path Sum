class Solution {
    public int find(int r,int c,int[][] grid,int[][] dp)
    {
        if(r==0 && c==0)
        {
            return grid[0][0];
        }
        if(r<0 || c<0) return (int)(1e9);
        if(dp[r][c]!=-1) return dp[r][c];
        int up=grid[r][c]+find(r-1,c,grid,dp);
        int left=grid[r][c]+find(r,c-1,grid,dp);
        return dp[r][c]=Math.min(up,left);
    }
    public int minPathSum(int[][] grid) {
        int n=grid.length;
        int m=grid[0].length;
        int[][] dp=new int[n][m];
        for(int[] arr:dp)
        {
            Arrays.fill(arr,-1);
        }
        return find(n-1,m-1,grid,dp);
    }
}
