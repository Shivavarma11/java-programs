class Solution {
    static final long mod=(long)(1e9+7);
    static long fibo(int n,long[] dp)
    {
        if(n<=1)
        {
            return n;
        }
        if(dp[n]!=-1) return dp[n];
        dp[n]=(fibo(n-1,dp)+fibo(n-2,dp))%mod;
        return dp[n];
        
    }
    
    static long topDown(int n) {
        // code here
        
        long[] dp=new long[n+1];
        Arrays.fill(dp,-1);
        return fibo(n,dp);
    }
    
    static long bottomUp(int n) {
        // code here
        if(n<=1) return n;
        long[] dp1=new long[n+1];
        dp1[0]=0;
        dp1[1]=1;
        for(int i=2;i<=n;i++)
        {
            dp1[i]=(dp1[i-1]+dp1[i-2])%mod;
        }
        return dp1[n];
        // long prev1=1;
        // long prev2=0;
        // for(int i=2;i<=n;i++)
        // {
        //     long curr=(prev1+prev2)%mod;
        //     prev2=prev1;
        //     prev1=curr;
        // }
        // return prev1;
        
    }
}
