class Solution {
    public int find(int i,int buy,int n,int[] prices,int fee,int[][] dp)
    {
        if(i==n) return 0;
        if(dp[i][buy]!=-1) return dp[i][buy];
        if(buy==1)
        {
            return dp[i][buy]=Math.max(-prices[i]+find(i+1,0,n,prices,fee,dp),0+find(i+1,1,n,prices,fee,dp));
        }
        else
        {
            return dp[i][buy]=Math.max(prices[i]-fee+find(i+1,1,n,prices,fee,dp),0+find(i+1,0,n,prices,fee,dp));
        }
    }
    public int maxProfit(int[] prices, int fee) {
        int n=prices.length;
        //int[][] dp=new int[n+1][2];
        // for(int[] arr:dp)
        // {
        //     Arrays.fill(arr,-1);
        // }
        int[] after=new int[2];
        int[] curr=new int[2];
        for(int i=n-1;i>=0;i--)
        {
            for(int buy=0;buy<=1;buy++)
            {
                if(buy==1)
                {
                    curr[buy]=Math.max(-prices[i]+ after[0],0+after[1]);
                }
                else
                {
                    curr[buy]=Math.max(prices[i]-fee+after[1],0+after[0]);
                }

            }
            after=(int[])curr.clone();
        }
        return curr[1];
    }
}
