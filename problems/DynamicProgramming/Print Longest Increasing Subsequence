class Solution {
    public ArrayList<Integer> longestIncreasingSubsequence(int n, int arr[]) {
        // Code here
        ArrayList<Integer> list=new ArrayList<>();
        int[] dp=new int[n];
        int[] hash=new int[n];
        int lastIndex=0;
        int max=1;
        for(int ind=0;ind<n;ind++)
        {
            hash[ind]=ind;
            for(int prev=0;prev<ind;prev++)
            {
                if(arr[prev]<arr[ind] && dp[ind]<1+dp[prev])
                {
                    dp[ind]= 1+dp[prev];
                    hash[ind]=prev;
                }
            }
            if(dp[ind]>max)
            {
                max=dp[ind];
                lastIndex=ind;
            }
        }
        list.add(arr[lastIndex]);
        while(hash[lastIndex]!=lastIndex)
        {
            lastIndex=hash[lastIndex];
            list.add(arr[lastIndex]);
        }
        Collections.reverse(list);
        return list;
    }
    
}
