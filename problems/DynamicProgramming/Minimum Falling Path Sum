class Solution {
    public int find(int r,int c,int[][] matrix,int[][] dp)
    {
        if(c<0 || c>=matrix[0].length) return (int)1e9;
        if(r==0)
        {
            return matrix[r][c];
        }
        if(dp[r][c]!=1) return dp[r][c];
        int ld=matrix[r][c]+find(r-1,c-1,matrix,dp);
        int up=matrix[r][c]+find(r-1,c,matrix,dp);
        int rd=matrix[r][c]+find(r-1,c+1,matrix,dp);
        return dp[r][c]=Math.min(up,Math.min(ld,rd));
    }
    public int minFallingPathSum(int[][] matrix) {
        int n=matrix.length;
        int[][] dp=new int[n][n];
        for(int[] arr:dp)
        {
            Arrays.fill(arr,1);
        }
        int min=(int)(1e9);
        for(int j=0;j<n;j++)
        {
            min=Math.min(min,find(n-1,j,matrix,dp));
        }
        return min;
    }
}
