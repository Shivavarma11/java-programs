class Solution {
    // public int find(int idx,List<Integer> arr,int[] dp)
    // {
    //     if(idx==0) return arr.get(0);
    //     if(idx<0) return 0;
    //     if(dp[idx]!=-1) return dp[idx];
    //     int notTake=0+find(idx-1,arr,dp);
    //     int take=arr.get(idx)+find(idx-2,arr,dp);
        
    //     return dp[idx]=Math.max(take,notTake);
        
    // }
    public int find(List<Integer> arr)
    {
        int n=arr.size();
        int[] dp=new int[n];
        dp[0]=arr.get(0);
        for(int i=1;i<n;i++)
        {
            int take=arr.get(i);
            if(i>1)
            {
                take+=dp[i-2];
            }
            int notTake=0+dp[i-1];
            dp[i]=Math.max(take,notTake);
        }
        return dp[n-1];
    }
    public int rob(int[] nums) {
        int n=nums.length;
        if(n==1) return nums[0];
        List<Integer> arr1=new ArrayList<>();
        List<Integer> arr2=new ArrayList<>();
        // int[] dp=new int[n];
        // Arrays.fill(dp,-1);
        for(int i=0;i<n;i++)
        {
            if(i!=0) arr1.add(nums[i]);
            if(i!=n-1) arr2.add(nums[i]);
        }
        int ans1=find(arr1);
        int ans2=find(arr2);
        return Math.max(ans1,ans2);
        
    }
}
