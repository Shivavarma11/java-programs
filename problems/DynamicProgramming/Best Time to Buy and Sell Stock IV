class Solution {
    public int find(int i,int buy,int k,int n,int[] prices,int[][][] dp)
    {
        if(k==0 ||i==n ) return 0;
        if(dp[i][buy][k]!=-1) return dp[i][buy][k];
        if(buy==1)
        {
            return dp[i][buy][k]=Math.max(-prices[i]+find(i+1,0,k,n,prices,dp),0+find(i+1,1,k,n,prices,dp));
        }
        else
        {
            return dp[i][buy][k]=Math.max(prices[i]+find(i+1,1,k-1,n,prices,dp),0+find(i+1,0,k,n,prices,dp));
        }
    }
    public int maxProfit(int k, int[] prices) {
        int n=prices.length;
        //int[][][] dp=new int[n+1][2][k+1];
        // for(int[][] arr:dp)
        // {
        //     for(int[] ar:arr)
        //     {
        //         Arrays.fill(ar,-1);
        //     }
        // }
        // for(int i=0;i<=n;i++)
        // {
        //     for(int buy=0;buy<=1;buy++)
        //     {
        //         dp[i][buy][0]=0;
        //     }
        // }
        // for(int buy=0;buy<=1;buy++)
        // {
        //     for(int cap=0;cap<=k;cap++)
        //     {
        //         dp[n][buy][0]=0;
        //     }
        // }
        int[][] after=new int[2][k+1];
        int[][] curr=new int[2][k+1];
        for(int i=n-1;i>=0;i--)
        {
            for(int buy=0;buy<=1;buy++)
            {
                for(int cap=1;cap<=k;cap++)
                {
                    if(buy==1)
                    {
                        curr[buy][cap]=Math.max(-prices[i]+after[0][cap],0+after[1][cap]);
                    }
                    else
                    {
                        curr[buy][cap]=Math.max(prices[i]+after[1][cap-1],0+after[0][cap]);
                    }

                }
                after=(int[][])curr.clone();
            }
        }
        return curr[1][k];
        
    }
}
