class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        int n=nums.length;
        Arrays.sort(nums);
        List<Integer> list=new ArrayList<>();
        int[] dp=new int[n];
        int[] hash=new int[n];
        int max=1;
        int lastInd=0;
        for(int i=0;i<n;i++)
        {
            hash[i]=i;
            dp[i]=1;
            for(int j=0;j<i;j++)
            {
                if(nums[i]%nums[j]==0 && dp[i]<dp[j]+1)
                {
                    dp[i]=dp[j]+1;
                    hash[i]=j;
                }
            }
            if(dp[i]>max)
            {
                max=dp[i];
                lastInd=i;
            }
        }
        list.add(nums[lastInd]);
        while(hash[lastInd]!=lastInd)
        {
            lastInd=hash[lastInd];
            list.add(nums[lastInd]);
        }
        Collections.reverse(list);
        return list;
    }
}
