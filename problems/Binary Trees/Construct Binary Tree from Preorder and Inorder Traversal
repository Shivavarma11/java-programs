class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        Map<Integer,Integer> map=new HashMap<>();
        int n=inorder.length;
        for(int i=0;i<n;i++)
        {
            map.put(inorder[i],i);
        }
        TreeNode root=buildTree(preorder,0,n-1,inorder,0,n-1,map);
        return root;
    }
    public TreeNode buildTree(int[] preorder,int ps,int pe,int[] inorder,int is,int ie,Map<Integer,Integer> map)
    {
        if(ps>pe || is>ie)
        {
            return null;
        }
        TreeNode node=new TreeNode(preorder[ps]);
        int idx=map.get(preorder[ps]);
        int numLeft=idx-is;
        node.left=buildTree(preorder,ps+1,ps+numLeft,inorder,is,idx-1,map);
        node.right=buildTree(preorder,ps+numLeft+1,pe,inorder,idx+1,ie,map);
        return node;
    }
}
