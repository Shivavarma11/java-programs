class Solution {
    public static int prec(char ch)
    {
        switch(ch)
        {
            case '+':
            case '-':
            return 1;
            
            case '*':
            case '/':
            return 2;
            
            case '^':
                return 3;
        }
        return -1;
    }
    // Function to convert an infix expression to a postfix expression.
    public static String infixToPostfix(String exp) {
        // Your code here
        StringBuilder ans=new StringBuilder();
        int n=exp.length();
        Stack<Character> st=new Stack<>();
        for(int i=0;i<n;i++)
        {
            char ch=exp.charAt(i);
            if(Character.isLetterOrDigit(ch))//(ch>='a' && ch<='z') || (ch>='A' && ch<='Z') || (ch>='0' && ch<='9'))
            {
                ans.append(ch);
            }
            else if(ch=='(')
            {
                st.push(ch);
            }
            else if(ch==')')
            {
                while(!st.isEmpty() && st.peek()!='(')
                {
                    ans.append(st.pop());
                }
                st.pop();
            }
            else
            {
                while( !st.isEmpty() && prec(ch)<=prec(st.peek()))
                {
                    ans.append(st.pop());
                }
                 
                st.push(ch);
                 
            }
        }
        while(!st.isEmpty())
        {
            ans.append(st.pop());
        }
        return ans.toString();
    }
}
