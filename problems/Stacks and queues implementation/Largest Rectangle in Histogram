class Solution {
    public int[] findNse(int[] arr,int n)
    {
        Stack<Integer> st=new Stack<>();
        int[] nse=new int[n];
        for(int i=n-1;i>=0;i--)
        {
            while(!st.isEmpty() && arr[st.peek()]>=arr[i])
            {
                st.pop();
            }
            nse[i]=st.isEmpty()?n:st.peek();
            st.push(i);
        }
        return nse;
    }
    public int[] findPse(int[] arr,int n)
    {
        Stack<Integer> st=new Stack<>();
        int[] pse=new int[n];
        for(int i=0;i<n;i++)
        {
            while(!st.isEmpty() && arr[st.peek()]>=arr[i])
            {
                st.pop();
            }
            pse[i]=st.isEmpty()?-1:st.peek();
            st.push(i);
        }
        return pse;
    }
    public int largestRectangleArea(int[] heights) {
        int n=heights.length;
        int[] nse=new int[n];
        int[] pse=new int[n];
        nse=findNse(heights,n);
        pse=findPse(heights,n);
        int max=Integer.MIN_VALUE;
        for(int i=0;i<n;i++)
        {
            max=Math.max(max,(nse[i]-pse[i]-1)*heights[i]);
            
        }
        return max;
        
    }
}
