class Solution {
    public int[] findPse(int[] arr,int n)
    {
        Stack<Integer> st=new Stack<>();
        int[] pse=new int[n];
        for(int i=0;i<n;i++)
        {
            while(!st.isEmpty() && arr[st.peek()]>arr[i])
            {
                st.pop();
            }
            pse[i]=st.isEmpty()?-1:st.peek();
            st.push(i);
        }
        return pse;
    }
    public int[] findNse(int[] arr,int n)
    {
        Stack<Integer> st=new Stack<>();
        int[] nse=new int[n];
        for(int i=n-1;i>=0;i--)
        {
            while(!st.isEmpty() && arr[st.peek()]>=arr[i])
            {
                st.pop();
            }
            nse[i]=st.isEmpty()?n:st.peek();
            st.push(i);
        }
        return nse;
    }
    public int sumSubarrayMins(int[] arr) {
        int mod=(int)1e9+7;
        long sum=0;
        int n=arr.length;
        int[] pse=findPse(arr,n);
        int[] nse=findNse(arr,n);
        for(int i=0;i<n;i++)
        {
            int left=i-pse[i];
            int right=nse[i]-i;
            sum=(sum+(left*right*1l*arr[i]))%mod;
            
        }
        return (int)(sum%mod);
    }
}
