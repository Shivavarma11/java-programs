class Solution {
    public int[] findNse(int[] arr,int n)
    {
        Stack<Integer> st=new Stack<>();
        int[] nse=new int[n];
        for(int i=n-1;i>=0;i--)
        {
            while(!st.isEmpty() && arr[st.peek()]>=arr[i])
            {
                st.pop();
            }
            nse[i]=st.isEmpty()?n:st.peek();
            st.push(i);
        }
        return nse;
    }
    public int[] findPse(int[] arr,int n)
    {
        Stack<Integer> st=new Stack<>();
        int[] pse=new int[n];
        for(int i=0;i<n;i++)
        {
            while(!st.isEmpty() && arr[st.peek()]>=arr[i])
            {
                st.pop();
            }
            pse[i]=st.isEmpty()?-1:st.peek();
            st.push(i);
        }
        return pse;
    }
    public int findMax(int[] arr,int n)
    {
        int[] nse=findNse(arr,n);
        int[] pse=findPse(arr,n);
        int max=0;
        for(int i=0;i<n;i++)
        {
            max=Math.max(max,(nse[i]-pse[i]-1)*arr[i]);
        }
        return max;
    }
    public int maximalRectangle(char[][] matrix) {
        int n=matrix.length;
        int m=matrix[0].length;
        int[][] preSum=new int[n][m];
        for(int j=0;j<m;j++)
        {
            int sum=0;
            for(int i=0;i<n;i++)
            {
                sum+=matrix[i][j]-'0';
                if(matrix[i][j]=='0')
                {
                    sum=0;
                }
                preSum[i][j]=sum;

            }
        }
        int max=0;
        for(int i=0;i<n;i++)
        {

            
            max=Math.max(max,findMax(preSum[i],m));


        }
        return max;
        
    }
}
