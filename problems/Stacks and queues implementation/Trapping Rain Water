class Solution {
    public int trap(int[] height) {
        int n=height.length;
        int lMax=0;
        int rMax=0;
        int total=0;
        int l=0;
        int r=n-1;
        while(l<r)
        {
            if(height[l]<=height[r])
            {
                if(lMax>height[l])
                {
                    total+=lMax-height[l];
                }
                else
                {
                    lMax=height[l];
                }
                l++;
            }
            else
            {
                if(rMax>height[r])
                {
                    total+=rMax-height[r];
                }
                else
                {
                    rMax=height[r];
                }
                r--;
            }
        }
        return total;
            
        // int n=height.length;
        // int[] preMax=new int[n];
        // int[] postMax=new int[n];
        // preMax[0]=height[0];
        // for(int i=1;i<n;i++)
        // {
        //     preMax[i]=Math.max(height[i],preMax[i-1]);
        // }
        // postMax[n-1]=height[n-1];
        // for(int i=n-2;i>=0;i--)
        // {
        //     postMax[i]=Math.max(postMax[i+1],height[i]);
        // }
        // int total=0;
        // int leftMax=0;
        // int rightMax=0;
        // for(int i=0;i<n;i++)
        // {
        //     leftMax=preMax[i];
        //     rightMax=postMax[i];
        //     if(leftMax>height[i] && rightMax>height[i])
        //     {
        //         total+=Math.min(leftMax,rightMax)-height[i];
        //     }
        // }
        // return total;

        
    }
}
